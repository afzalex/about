name: Process Resume

on:
  push:
    branches:
      - master
    paths:
      - data/resume/docs/*.template.docx

jobs:
  create-resumes:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up permissions
        run: chmod +x data/resume/bin/create-resumes.sh

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build JAR
        working-directory: data/resume
        run: |
          ./gradlew build

      - name: Run resume creation script
        working-directory: data/resume
        run: ./bin/create-resumes.sh

      - name: Upload DOCX to Dropbox
        uses: ./.github/actions/dropbox-upload
        with:
          file_pattern: 'docs/resume*.docx'
          dropbox_path: '/about/resume'
          working_directory: 'data/resume'
          token: ${{ secrets.DROPBOX_ACCESS_TOKEN }}

      - name: Upload DOCX as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: resume-docx
          path: data/resume/docs/resume*.docx
          if-no-files-found: error

  convert-to-pdf:
    needs: create-resumes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download DOCX artifacts
        uses: actions/download-artifact@v4
        with:
          name: resume-docx
          path: data/resume/docs

      - name: Convert DOCX to PDF
        uses: ./.github/actions/docx-to-pdf
        with:
          file_pattern: 'docs/resume*.docx'
          working_directory: 'data/resume'

      - name: Upload PDF to Dropbox
        uses: ./.github/actions/dropbox-upload
        with:
          file_pattern: 'docs/resume*.pdf'
          dropbox_path: '/about/resume'
          working_directory: 'data/resume'
          token: ${{ secrets.DROPBOX_ACCESS_TOKEN }}

      - name: Upload PDF as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: resume-pdf
          path: data/resume/docs/resume*.pdf
          if-no-files-found: error

  update-git:
    needs: [create-resumes, convert-to-pdf]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: data/resume/docs

      - name: Create and push to git branch
        run: |
          git config user.email "afzalex.store@gmail.com"
          git config user.name "afzalex bot"
          git checkout -b fzbot
          git reset --hard master
          
          ls -la data/resume/docs

          # Copy all generated files to docs/assets
          mkdir -p docs/assets
          cp data/resume/docs/resume-docx/*.docx docs/assets/ 2>/dev/null || true
          cp data/resume/docs/resume-pdf/*.pdf docs/assets/ 2>/dev/null || true
          
          git add docs/assets/*
          git commit -m "Added generated resume files"
          git fetch
          git branch --set-upstream-to=origin/fzbot fzbot
          git push -f

  notify:
    needs: [create-resumes, convert-to-pdf, update-git]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine workflow status
        id: workflow-status
        run: |
          if [[ "${{ needs.create-resumes.result }}" == "success" && \
                "${{ needs.convert-to-pdf.result }}" == "success" && \
                "${{ needs.update-git.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "subject=Resume Generation Complete" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "subject=Workflow Failure" >> $GITHUB_OUTPUT
          fi

      - name: Download artifacts
        if: steps.workflow-status.outputs.status == 'success'
        uses: actions/download-artifact@v4
        with:
          path: data/resume/docs

      - name: Process success template
        if: steps.workflow-status.outputs.status == 'success'
        run: |
          # List generated files in HTML format and store in a temporary variable
          FILES_HTML=$(find data/resume/docs -type f \( -name "resume*.pdf" -o -name "resume*.docx" \) | sort | while read -r file; do
            filename=$(basename "$file")
            echo "<li><a href=\"https://raw.githubusercontent.com/${{ github.repository }}/fzbot/docs/assets/$filename\">$filename</a></li>"
          done | tr '\n' ' ')

          # Process HTML template using the stored files list
          export REPOSITORY="${{ github.repository }}"
          export RUN_ID="${{ github.run_id }}"
          export FILES_LIST="$FILES_HTML"
          envsubst < .github/templates/success.html > rendered.html

      - name: Process failure template
        if: steps.workflow-status.outputs.status == 'failure'
        run: |
          export REPOSITORY="${{ github.repository }}"
          export RUN_ID="${{ github.run_id }}"
          envsubst < .github/templates/failure.html > rendered.html

      - name: Read rendered template
        id: read-template
        run: |
          echo 'html_content<<EOF' >> $GITHUB_OUTPUT
          cat rendered.html >> $GITHUB_OUTPUT
          echo '' >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Send Email Notification
        uses: ./.github/actions/notify-email
        with:
          email: 'mohammadafzal.tech@gmail.com'
          subject: ${{ steps.workflow-status.outputs.subject }}
          html_content: ${{ steps.read-template.outputs.html_content }}
          gmail_user: ${{ secrets.GMAIL_USER }}
          gmail_app_password: ${{ secrets.GMAIL_APP_PASSWORD }}
